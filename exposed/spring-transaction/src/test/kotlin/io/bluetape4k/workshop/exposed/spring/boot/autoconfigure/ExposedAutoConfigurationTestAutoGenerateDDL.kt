package io.bluetape4k.workshop.exposed.spring.boot.autoconfigure

import io.bluetape4k.support.uninitialized
import io.bluetape4k.workshop.exposed.spring.boot.Application
import io.bluetape4k.workshop.exposed.spring.boot.tables.TestTable
import org.amshove.kluent.shouldBeEqualTo
import org.amshove.kluent.shouldHaveSize
import org.amshove.kluent.shouldNotBeNull
import org.jetbrains.exposed.spring.SpringTransactionManager
import org.jetbrains.exposed.sql.selectAll
import org.junit.jupiter.api.Test
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.transaction.annotation.Transactional

@SpringBootTest(
    classes = [Application::class],
    properties = [
        "spring.datasource.url=jdbc:h2:mem:test-ddl",
        "spring.datasource.driver-class-name=org.h2.Driver",
        "spring.exposed.generate-ddl=true",
        "spring.exposed.show-sql=true"
    ]
)
class ExposedAutoConfigurationTestAutoGenerateDDL {

    @Autowired(required = false)
    private val springTransactionManager: SpringTransactionManager = uninitialized()

    @Autowired
    private val asyncService: AsyncExposedService = uninitialized()

    @Test
    fun `should initialize the database connection`() {
        springTransactionManager.shouldNotBeNull()
    }

    @Test
    @Transactional
    fun `should create schema`() {
        TestTable.selectAll().count().toInt() shouldBeEqualTo 0
    }

    @Test
    @Transactional
    fun `async service should be initialized properly`() {
        asyncService.allTestDataAsync().join() shouldHaveSize 0
    }
}
